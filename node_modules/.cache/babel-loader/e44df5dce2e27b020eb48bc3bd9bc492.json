{"ast":null,"code":"export let store = {\n  _state: {\n    profilePage: {\n      newPostText: \"\",\n      posts: [{\n        id: 1,\n        message: 'Hi, how are you',\n        likesCount: 12\n      }, {\n        id: 2,\n        message: 'It\\'s my first post',\n        likesCount: 11\n      }]\n    },\n    dialogsPage: {\n      messages: [{\n        id: 1,\n        message: 'Hi'\n      }, {\n        id: 2,\n        message: 'Hi'\n      }, {\n        id: 3,\n        message: 'Yo'\n      }, {\n        id: 4,\n        message: 'Yo'\n      }, {\n        id: 5,\n        message: 'Yo'\n      }],\n      dialogs: [{\n        id: 1,\n        name: 'Dimych'\n      }, {\n        id: 2,\n        name: 'Andrew'\n      }, {\n        id: 3,\n        name: 'Sveta'\n      }, {\n        id: 4,\n        name: 'Sasha'\n      }, {\n        id: 5,\n        name: 'Viktor'\n      }, {\n        id: 6,\n        name: 'Valera'\n      }]\n    },\n    sidebar: {}\n  },\n\n  _callSubcsriber(state) {\n    console.log('State was changed');\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  subscribe(observer) {\n    this._callSubcsriber = observer;\n  },\n\n  dispatch(action) {\n    if (action.type === ADD_POST) {\n      const newPost = {\n        id: new Date().getTime(),\n        message: this._state.profilePage.newPostText,\n        likesCount: 0\n      };\n\n      this._state.profilePage.posts.push(newPost);\n\n      this._state.profilePage.newPostText = '';\n\n      this._callSubcsriber(this._state);\n    } else if (action.type === UPDATE_NEW_POST_TEXT) {\n      this._state.profilePage.newPostText = action.newText; //this._state.profilePage = {...this._state.profilePage, newPostText: action.newText};\n\n      this._callSubcsriber(this._state);\n    }\n  }\n\n};\nconst ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nexport const addPostActionCreater = () => {\n  return {\n    type: ADD_POST\n  };\n};\nexport const updateNewPostText = text => {\n  return {\n    type: UPDATE_NEW_POST_TEXT,\n    newText: text\n  };\n};","map":{"version":3,"sources":["C:/incubator/social_network_ts/src/redux/state.ts"],"names":["store","_state","profilePage","newPostText","posts","id","message","likesCount","dialogsPage","messages","dialogs","name","sidebar","_callSubcsriber","state","console","log","getState","subscribe","observer","dispatch","action","type","ADD_POST","newPost","Date","getTime","push","UPDATE_NEW_POST_TEXT","newText","addPostActionCreater","updateNewPostText","text"],"mappings":"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","sourcesContent":["type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n}\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\ntype SidebarType = {}\r\n\r\n export type StateType = {\r\n     profilePage: ProfilePageType\r\n     dialogsPage: DialogPageType\r\n     sidebar: SidebarType\r\n}\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n    _callSubcsriber: CallSubscriberType\r\n    getState: GetStateType\r\n    subscribe: SubscribeType\r\n    addPost: AddPostType\r\n    uodateNewPostText: UpdateNewPostTextType\r\n}\r\n\r\nexport type CallSubscriberType = () => void;\r\nexport type SubscribeType = (state: StateType) => void;\r\nexport type GetStateType = () => void;\r\nexport type DispatchType = (action: ActionType) => void\r\nexport type AddPostType = () => void\r\nexport type UpdateNewPostTextType = (text: string) => void\r\n\r\nexport type ActionType = {\r\n    type: string\r\n    newText: string\r\n}\r\n\r\n\r\nexport let store = {\r\n    _state: {\r\n        profilePage: {\r\n            newPostText: \"\",\r\n            posts: [\r\n                {id: 1, message: 'Hi, how are you', likesCount: 12},\r\n                {id: 2, message: 'It\\'s my first post', likesCount: 11}\r\n            ],\r\n        },\r\n        dialogsPage: {\r\n            messages: [\r\n                {id: 1, message: 'Hi'},\r\n                {id: 2, message: 'Hi'},\r\n                {id: 3, message: 'Yo'},\r\n                {id: 4, message: 'Yo'},\r\n                {id: 5, message: 'Yo'},\r\n            ],\r\n            dialogs:  [\r\n                {id: 1, name: 'Dimych'},\r\n                {id: 2, name: 'Andrew'},\r\n                {id: 3, name: 'Sveta'},\r\n                {id: 4, name: 'Sasha'},\r\n                {id: 5, name: 'Viktor'},\r\n                {id: 6, name: 'Valera'},\r\n            ],\r\n        },\r\n        sidebar : {}\r\n    },\r\n    _callSubcsriber(state: StateType) {\r\n        console.log('State was changed')\r\n    },\r\n\r\n    getState() {\r\n        return this._state;\r\n    },\r\n    subscribe(observer: SubscribeType) {\r\n        this._callSubcsriber = observer;\r\n    },\r\n\r\n    dispatch(action:ActionType) {\r\n        if (action.type === ADD_POST) {\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: this._state.profilePage.newPostText,\r\n                likesCount: 0\r\n            };\r\n\r\n            this._state.profilePage.posts.push(newPost);\r\n            this._state.profilePage.newPostText = '';\r\n            this._callSubcsriber(this._state);\r\n        } else if (action.type === UPDATE_NEW_POST_TEXT) {\r\n            this._state.profilePage.newPostText = action.newText;\r\n            //this._state.profilePage = {...this._state.profilePage, newPostText: action.newText};\r\n            this._callSubcsriber(this._state);\r\n        }\r\n    }\r\n}\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst UPDATE_NEW_POST_TEXT =  'UPDATE-NEW-POST-TEXT'\r\n\r\nexport const addPostActionCreater = () => {\r\n    return { type: ADD_POST}\r\n}\r\nexport const updateNewPostText = (text) => {\r\n    return {type: UPDATE_NEW_POST_TEXT, newText: text}\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}