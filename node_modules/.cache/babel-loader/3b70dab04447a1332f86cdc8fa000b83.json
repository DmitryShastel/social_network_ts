{"ast":null,"code":"var _jsxFileName = \"C:\\\\incubator\\\\social_network_ts\\\\src\\\\components\\\\Users\\\\UsersContainer.tsx\";\nimport React from \"react\";\nimport { followAC, setCurrentPageAC, setTotalUsersCountAC, setUsersAC, toggleIsFetchingAC, unfollowAC } from \"../../redux/users-reducer\";\nimport { connect } from \"react-redux\";\nimport { Users } from \"./Users\";\nimport axios from \"axios\";\nimport preloader from \"../../assets/images/preloader.svg\";\nexport class UsersContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.toggleIsFetching(true);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.toggleIsFetching(true);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isFetching ? /*#__PURE__*/React.createElement(\"img\", {\n      src: preloader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 38\n      }\n    }) : null, /*#__PURE__*/React.createElement(Users, {\n      setTotalUsersCount: this.props.setTotalUsersCount,\n      currentPage: this.props.currentPage,\n      setCurrentPage: this.props.setCurrentPage,\n      setUsers: this.props.setUsers,\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      users: this.props.users,\n      onPageChanged: this.onPageChanged,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    follow: userId => {\n      dispatch(followAC(userId));\n    },\n    unfollow: userId => {\n      dispatch(unfollowAC(userId));\n    },\n    setUsers: users => {\n      dispatch(setUsersAC(users));\n    },\n    setCurrentPage: pageNumber => {\n      dispatch(setCurrentPageAC(pageNumber));\n    },\n    setTotalUsersCount: totalCount => {\n      dispatch(setTotalUsersCountAC(totalCount));\n    },\n    toggleIsFetching: isFetching => {\n      dispatch(toggleIsFetchingAC(isFetching));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer);","map":{"version":3,"sources":["C:/incubator/social_network_ts/src/components/Users/UsersContainer.tsx"],"names":["React","followAC","setCurrentPageAC","setTotalUsersCountAC","setUsersAC","toggleIsFetchingAC","unfollowAC","connect","Users","axios","UsersContainer","Component","constructor","props","onPageChanged","pageNumber","setCurrentPage","toggleIsFetching","get","pageSize","then","response","setUsers","data","items","componentDidMount","currentPage","setTotalUsersCount","totalCount","render","isFetching","preloader","totalUsersCount","users","follow","unfollow","mapStateToProps","state","usersPage","mapDispatchToProps","dispatch","userId"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n    ActionsUsersType,\r\n    followAC,\r\n    setCurrentPageAC,\r\n    setTotalUsersCountAC,\r\n    setUsersAC, toggleIsFetchingAC,\r\n    unfollowAC,\r\n    UsersPropsType\r\n} from \"../../redux/users-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport axios from \"axios\";\r\nimport preloader from '../../assets/images/preloader.svg'\r\n\r\ntype MapStateToProps = {\r\n    users: Array<UsersPropsType>\r\n    pageSize: number   //?????\r\n    totalUsersCount: number //????\r\n    currentPage: number //??\r\n    isFetching: boolean\r\n}\r\ntype MapDispatchToProps = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UsersPropsType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (boolean: boolean) => void\r\n}\r\nexport type UserType = {\r\n    users: Array<UsersPropsType>\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    setUsers: (users: Array<UsersPropsType>) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\ntype UsersContainerPropsType =  MapStateToProps & MapDispatchToProps\r\n\r\nexport class UsersContainer extends  React.Component <UsersContainerPropsType> {\r\n\r\n    constructor(props: UsersContainerPropsType) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.toggleIsFetching(true);\r\n                this.props.setUsers(response.data.items);\r\n                this.props.setTotalUsersCount(response.data.totalCount);\r\n            });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.toggleIsFetching(true);\r\n                this.props.setUsers(response.data.items);\r\n            })\r\n\r\n    };\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <img src={preloader}/> : null}\r\n            <Users\r\n                setTotalUsersCount = {this.props.setTotalUsersCount}\r\n                currentPage = {this.props.currentPage}\r\n                setCurrentPage = {this.props.setCurrentPage}\r\n                setUsers = {this.props.setUsers}\r\n                totalUsersCount = {this.props.totalUsersCount}\r\n                pageSize = {this.props.pageSize}\r\n                users = {this.props.users}\r\n                onPageChanged = {this.onPageChanged}\r\n                follow = {this.props.follow}\r\n                unfollow = {this.props.unfollow}\r\n            />\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateType): MapStateToProps => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionsUsersType) => void): MapDispatchToProps => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount) => {\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, {}, StateType>\r\n(mapStateToProps, mapDispatchToProps) (UsersContainer);"]},"metadata":{},"sourceType":"module"}