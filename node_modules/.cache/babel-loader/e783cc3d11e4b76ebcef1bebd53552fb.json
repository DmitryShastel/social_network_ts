{"ast":null,"code":"//export type CallSubscriberType = () => void;\n//export type SubscribeType = (state: StateType) => void;\n//export type DispatchType = (action: ActionsTypes) => void\n//export type ActionsTypes = AddPostType | UpdateNewTextActionType\nexport let store = {\n  _state: {\n    profilePage: {\n      newPostText: \"\",\n      posts: [{\n        id: 1,\n        message: 'Hi, how are you',\n        likesCount: 12\n      }, {\n        id: 2,\n        message: 'It\\'s my first post',\n        likesCount: 11\n      }]\n    },\n    dialogsPage: {\n      messages: [{\n        id: 1,\n        message: 'Hi'\n      }, {\n        id: 2,\n        message: 'Hi'\n      }, {\n        id: 3,\n        message: 'Yo'\n      }, {\n        id: 4,\n        message: 'Yo'\n      }, {\n        id: 5,\n        message: 'Yo'\n      }],\n      dialogs: [{\n        id: 1,\n        name: 'Dimych'\n      }, {\n        id: 2,\n        name: 'Andrew'\n      }, {\n        id: 3,\n        name: 'Sveta'\n      }, {\n        id: 4,\n        name: 'Sasha'\n      }, {\n        id: 5,\n        name: 'Viktor'\n      }, {\n        id: 6,\n        name: 'Valera'\n      }]\n    },\n    sidebar: {}\n  },\n\n  _callSubcsriber() {\n    console.log('State was changed');\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  subscribe(observer) {\n    this._callSubcsriber = observer;\n  },\n\n  dispatch(action) {\n    if (action.type === 'ADD-POST') {\n      const newPost = {\n        id: new Date().getTime(),\n        message: this._state.profilePage.newPostText,\n        likesCount: 0\n      };\n\n      this._state.profilePage.posts.push(newPost);\n\n      this._state.profilePage.newPostText = '';\n\n      this._callSubcsriber();\n    } else if (action.type === 'UPFATE-NEW-POST-TEXT') {\n      this._state.profilePage.newPostText = action.newText;\n\n      this._callSubcsriber();\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/incubator/social_network_ts/src/redux/state.ts"],"names":["store","_state","profilePage","newPostText","posts","id","message","likesCount","dialogsPage","messages","dialogs","name","sidebar","_callSubcsriber","console","log","getState","subscribe","observer","dispatch","action","type","newPost","Date","getTime","push","newText"],"mappings":"AAqCA;AACA;AAEA;AAEA;AAYA,OAAO,IAAIA,KAAgB,GAAG;AAC1BC,EAAAA,MAAM,EAAE;AACJC,IAAAA,WAAW,EAAE;AACTC,MAAAA,WAAW,EAAE,EADJ;AAETC,MAAAA,KAAK,EAAE,CACH;AAACC,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE,iBAAjB;AAAoCC,QAAAA,UAAU,EAAE;AAAhD,OADG,EAEH;AAACF,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE,qBAAjB;AAAwCC,QAAAA,UAAU,EAAE;AAApD,OAFG;AAFE,KADT;AAQJC,IAAAA,WAAW,EAAE;AACTC,MAAAA,QAAQ,EAAE,CACN;AAACJ,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OADM,EAEN;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OAFM,EAGN;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OAHM,EAIN;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OAJM,EAKN;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OALM,CADD;AAQTI,MAAAA,OAAO,EAAG,CACN;AAACL,QAAAA,EAAE,EAAE,CAAL;AAAQM,QAAAA,IAAI,EAAE;AAAd,OADM,EAEN;AAACN,QAAAA,EAAE,EAAE,CAAL;AAAQM,QAAAA,IAAI,EAAE;AAAd,OAFM,EAGN;AAACN,QAAAA,EAAE,EAAE,CAAL;AAAQM,QAAAA,IAAI,EAAE;AAAd,OAHM,EAIN;AAACN,QAAAA,EAAE,EAAE,CAAL;AAAQM,QAAAA,IAAI,EAAE;AAAd,OAJM,EAKN;AAACN,QAAAA,EAAE,EAAE,CAAL;AAAQM,QAAAA,IAAI,EAAE;AAAd,OALM,EAMN;AAACN,QAAAA,EAAE,EAAE,CAAL;AAAQM,QAAAA,IAAI,EAAE;AAAd,OANM;AARD,KART;AAyBJC,IAAAA,OAAO,EAAG;AAzBN,GADkB;;AA4B1BC,EAAAA,eAAe,GAAG;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,GA9ByB;;AAgC1BC,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKf,MAAZ;AACH,GAlCyB;;AAmC1BgB,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,SAAKL,eAAL,GAAuBK,QAAvB;AACH,GArCyB;;AAuC1BC,EAAAA,QAAQ,CAACC,MAAD,EAAS;AACb,QAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC5B,YAAMC,OAAiB,GAAG;AACtBjB,QAAAA,EAAE,EAAE,IAAIkB,IAAJ,GAAWC,OAAX,EADkB;AAEtBlB,QAAAA,OAAO,EAAE,KAAKL,MAAL,CAAYC,WAAZ,CAAwBC,WAFX;AAGtBI,QAAAA,UAAU,EAAE;AAHU,OAA1B;;AAMA,WAAKN,MAAL,CAAYC,WAAZ,CAAwBE,KAAxB,CAA8BqB,IAA9B,CAAmCH,OAAnC;;AACA,WAAKrB,MAAL,CAAYC,WAAZ,CAAwBC,WAAxB,GAAsC,EAAtC;;AACA,WAAKU,eAAL;AACH,KAVD,MAUO,IAAIO,MAAM,CAACC,IAAP,KAAgB,sBAApB,EAA4C;AAC/C,WAAKpB,MAAL,CAAYC,WAAZ,CAAwBC,WAAxB,GAAsCiB,MAAM,CAACM,OAA7C;;AACA,WAAKb,eAAL;AACH;AACJ;;AAtDyB,CAAvB","sourcesContent":["type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n    newPostText: string\r\n    posts: Array<PostType>\r\n}\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\ntype SidebarType = {}\r\n\r\n export type StateType = {\r\n     profilePage: ProfilePageType\r\n     dialogsPage: DialogPageType\r\n     sidebar: SidebarType\r\n}\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n    _callSubcsriber: () => void\r\n    getState: GetStateType\r\n    subscribe: (observer: () => void) => void\r\n    dispatch: (action: AddPostType | UpdateNewTextActionType) => void\r\n}\r\n\r\n//export type CallSubscriberType = () => void;\r\n//export type SubscribeType = (state: StateType) => void;\r\nexport type GetStateType = () => void;\r\n//export type DispatchType = (action: ActionsTypes) => void\r\n\r\n//export type ActionsTypes = AddPostType | UpdateNewTextActionType\r\nexport type AddPostType = {\r\n    type:'ADD-POST'\r\n\r\n}\r\nexport type UpdateNewTextActionType = {\r\n    type: 'UPFATE-NEW-POST-TEXT'\r\n    newText: string\r\n}\r\n\r\n\r\n\r\nexport let store: StoreType = {\r\n    _state: {\r\n        profilePage: {\r\n            newPostText: \"\",\r\n            posts: [\r\n                {id: 1, message: 'Hi, how are you', likesCount: 12},\r\n                {id: 2, message: 'It\\'s my first post', likesCount: 11}\r\n            ],\r\n        },\r\n        dialogsPage: {\r\n            messages: [\r\n                {id: 1, message: 'Hi'},\r\n                {id: 2, message: 'Hi'},\r\n                {id: 3, message: 'Yo'},\r\n                {id: 4, message: 'Yo'},\r\n                {id: 5, message: 'Yo'},\r\n            ],\r\n            dialogs:  [\r\n                {id: 1, name: 'Dimych'},\r\n                {id: 2, name: 'Andrew'},\r\n                {id: 3, name: 'Sveta'},\r\n                {id: 4, name: 'Sasha'},\r\n                {id: 5, name: 'Viktor'},\r\n                {id: 6, name: 'Valera'},\r\n            ],\r\n        },\r\n        sidebar : {}\r\n    },\r\n    _callSubcsriber() {\r\n        console.log('State was changed')\r\n    },\r\n\r\n    getState() {\r\n        return this._state;\r\n    },\r\n    subscribe(observer) {\r\n        this._callSubcsriber = observer;\r\n    },\r\n\r\n    dispatch(action) {\r\n        if (action.type === 'ADD-POST') {\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: this._state.profilePage.newPostText,\r\n                likesCount: 0\r\n            };\r\n\r\n            this._state.profilePage.posts.push(newPost);\r\n            this._state.profilePage.newPostText = '';\r\n            this._callSubcsriber();\r\n        } else if (action.type === 'UPFATE-NEW-POST-TEXT') {\r\n            this._state.profilePage.newPostText = action.newText;\r\n            this._callSubcsriber();\r\n        }\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}