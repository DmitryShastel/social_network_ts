{"ast":null,"code":"var _jsxFileName = \"C:\\\\incubator\\\\social_network_ts\\\\src\\\\components\\\\Users\\\\UsersContainer.tsx\";\nimport React from \"react\";\nimport { follow, setCurrentPage, setTotalUsersCount, setUsers, toggleIsFetching, unfollow } from \"../../redux/users-reducer\";\nimport { connect } from \"react-redux\";\nimport { Users } from \"./Users\";\nimport axios from \"axios\";\nimport { Preloader } from \"../common/Preloader/Preloader\";\nexport class UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isFetching ? /*#__PURE__*/React.createElement(Preloader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 38\n      }\n    }) : null, /*#__PURE__*/React.createElement(Users, {\n      setTotalUsersCount: this.props.setTotalUsersCount,\n      currentPage: this.props.currentPage,\n      setCurrentPage: this.props.setCurrentPage,\n      setUsers: this.props.setUsers,\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      users: this.props.users,\n      onPageChanged: this.onPageChanged,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n/*let mapDispatchToProps = (dispatch: (action: ActionsUsersType) => void): MapDispatchToProps => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount) => {\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/\n\n\nexport default connect(mapStateToProps,\n/*mapDispatchToProps*/\nfollow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching)(UsersContainer);","map":{"version":3,"sources":["C:/incubator/social_network_ts/src/components/Users/UsersContainer.tsx"],"names":["React","follow","setCurrentPage","setTotalUsersCount","setUsers","toggleIsFetching","unfollow","connect","Users","axios","Preloader","UsersContainer","Component","onPageChanged","pageNumber","props","get","pageSize","then","response","data","items","componentDidMount","currentPage","totalCount","render","isFetching","totalUsersCount","users","mapStateToProps","state","usersPage"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n    ActionsUsersType,\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleIsFetching,\r\n    unfollow,\r\n    UsersPropsType\r\n} from \"../../redux/users-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport axios from \"axios\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\ntype MapStateToProps = {\r\n    users: Array<UsersPropsType>\r\n    pageSize: number   //?????\r\n    totalUsersCount: number //????\r\n    currentPage: number //??\r\n    isFetching: boolean\r\n    }\r\ntype MapDispatchToProps = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UsersPropsType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (boolean: boolean) => void\r\n}\r\nexport type UserMainType = {\r\n    users: Array<UsersPropsType>\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    setUsers: (users: Array<UsersPropsType>) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\nexport type UsersContainerPropsType =  MapStateToProps & MapDispatchToProps\r\n\r\nexport class UsersContainer extends  React.Component <UsersContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(response.data.items);\r\n                this.props.setTotalUsersCount(response.data.totalCount);\r\n            });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(response.data.items);\r\n            })\r\n\r\n    };\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                setTotalUsersCount = {this.props.setTotalUsersCount}\r\n                currentPage = {this.props.currentPage}\r\n                setCurrentPage = {this.props.setCurrentPage}\r\n                setUsers = {this.props.setUsers}\r\n                totalUsersCount = {this.props.totalUsersCount}\r\n                pageSize = {this.props.pageSize}\r\n                users = {this.props.users}\r\n                onPageChanged = {this.onPageChanged}\r\n                follow = {this.props.follow}\r\n                unfollow = {this.props.unfollow}\r\n            />\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateType): MapStateToProps => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\n/*let mapDispatchToProps = (dispatch: (action: ActionsUsersType) => void): MapDispatchToProps => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount) => {\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, {}, StateType>\r\n(mapStateToProps, /*mapDispatchToProps*/\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleIsFetching\r\n    ) (UsersContainer);"]},"metadata":{},"sourceType":"module"}