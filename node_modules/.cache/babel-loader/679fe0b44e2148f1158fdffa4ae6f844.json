{"ast":null,"code":"var _jsxFileName = \"C:\\\\incubator\\\\social_network_ts\\\\src\\\\components\\\\Users\\\\UsersContainer.tsx\";\nimport React from \"react\";\nimport { follow, getUsersThunkCreator, setCurrentPage, setUsers, toggleFollowingProgress, unfollow } from \"../../redux/users-reducer\";\nimport { connect } from \"react-redux\";\nimport { Users } from \"./Users\";\nimport { Preloader } from \"../common/Preloader/Preloader\";\nexport class UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.getUsers(pageNumber, this.props.pageSize);\n    };\n  }\n\n  componentDidMount() {\n    this.props.getUsers(this.props.currentPage, this.props.pageSize);\n    /*  this.props.toggleIsFetching(true);\r\n        userAPI.getUsers(this.props.currentPage, this.props.pageSize)\r\n          .then(data => {\r\n              this.props.toggleIsFetching(false);\r\n              this.props.setUsers(data.items);\r\n              this.props.setTotalUsersCount(data.totalCount);\r\n          });*/\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isFetching ? /*#__PURE__*/React.createElement(Preloader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 38\n      }\n    }) : null, /*#__PURE__*/React.createElement(Users, {\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      currentPage: this.props.currentPage,\n      onPageChanged: this.onPageChanged,\n      users: this.props.users,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      toggleFollowingProgress: this.props.toggleFollowingProgress,\n      followingInProgress: this.props.followingInProgress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching,\n    followingInProgress: state.usersPage.followingInProgress\n  };\n};\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  toggleFollowingProgress,\n  getUsers: getUsersThunkCreator\n})(UsersContainer);\n/*type MapStateToProps = {\r\n    users: Array<UsersPropsType>\r\n    pageSize: number   //?????\r\n    totalUsersCount: number //????\r\n    currentPage: number //??\r\n    isFetching: boolean\r\n    }\r\ntype MapDispatchToProps = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UsersPropsType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (boolean: boolean) => void\r\n}\r\nexport type UsersContainerPropsType =  MapStateToProps & MapDispatchToProps*/\n\n/*let mapDispatchToProps = (dispatch: (action: ActionsUsersType) => void): MapDispatchToProps => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount) => {\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/","map":{"version":3,"sources":["C:/incubator/social_network_ts/src/components/Users/UsersContainer.tsx"],"names":["React","follow","getUsersThunkCreator","setCurrentPage","setUsers","toggleFollowingProgress","unfollow","connect","Users","Preloader","UsersContainer","Component","onPageChanged","pageNumber","props","getUsers","pageSize","componentDidMount","currentPage","render","isFetching","totalUsersCount","users","followingInProgress","mapStateToProps","state","usersPage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,MADJ,EACYC,oBADZ,EAEIC,cAFJ,EAIIC,QAJJ,EAIcC,uBAJd,EAMIC,QANJ,QASO,2BATP;AAUA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,SAAQC,KAAR,QAAoB,SAApB;AACA,SAAQC,SAAR,QAAwB,+BAAxB;AAsBA,OAAO,MAAMC,cAAN,SAA8BV,KAAK,CAACW,SAApC,CAAmE;AAAA;AAAA;;AAAA,SAgBtEC,aAhBsE,GAgBrDC,UAAD,IAAwB;AACpC,WAAKC,KAAL,CAAWC,QAAX,CAAoBF,UAApB,EAAgC,KAAKC,KAAL,CAAWE,QAA3C;AACH,KAlBqE;AAAA;;AAEtEC,EAAAA,iBAAiB,GAAG;AAEhB,SAAKH,KAAL,CAAWC,QAAX,CAAoB,KAAKD,KAAL,CAAWI,WAA/B,EAA4C,KAAKJ,KAAL,CAAWE,QAAvD;AAEF;AACN;AACA;AACA;AACA;AACA;AACA;AAEK;;AAMDG,EAAAA,MAAM,GAAG;AACL,wBAAO,0CACF,KAAKL,KAAL,CAAWM,UAAX,gBAAwB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxB,GAAuC,IADrC,eAEH,oBAAC,KAAD;AACI,MAAA,eAAe,EAAI,KAAKN,KAAL,CAAWO,eADlC;AAEI,MAAA,QAAQ,EAAI,KAAKP,KAAL,CAAWE,QAF3B;AAGI,MAAA,WAAW,EAAI,KAAKF,KAAL,CAAWI,WAH9B;AAII,MAAA,aAAa,EAAI,KAAKN,aAJ1B;AAKI,MAAA,KAAK,EAAI,KAAKE,KAAL,CAAWQ,KALxB;AAMI,MAAA,MAAM,EAAI,KAAKR,KAAL,CAAWb,MANzB;AAOI,MAAA,QAAQ,EAAI,KAAKa,KAAL,CAAWR,QAP3B;AAQI,MAAA,uBAAuB,EAAI,KAAKQ,KAAL,CAAWT,uBAR1C;AASI,MAAA,mBAAmB,EAAI,KAAKS,KAAL,CAAWS,mBATtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFG,CAAP;AAeH;;AApCqE;;AAuC1E,IAAIC,eAAe,GAAIC,KAAD,IAAqB;AACvC,SAAO;AACHH,IAAAA,KAAK,EAAEG,KAAK,CAACC,SAAN,CAAgBJ,KADpB;AAEHN,IAAAA,QAAQ,EAAES,KAAK,CAACC,SAAN,CAAgBV,QAFvB;AAGHK,IAAAA,eAAe,EAAEI,KAAK,CAACC,SAAN,CAAgBL,eAH9B;AAIHH,IAAAA,WAAW,EAAEO,KAAK,CAACC,SAAN,CAAgBR,WAJ1B;AAKHE,IAAAA,UAAU,EAAEK,KAAK,CAACC,SAAN,CAAgBN,UALzB;AAMHG,IAAAA,mBAAmB,EAAEE,KAAK,CAACC,SAAN,CAAgBH;AANlC,GAAP;AAQH,CATD;;AAcA,eAAehB,OAAO,CAACiB,eAAD,EAAkB;AAChCvB,EAAAA,MADgC;AAEhCK,EAAAA,QAFgC;AAGhCF,EAAAA,QAHgC;AAIhCD,EAAAA,cAJgC;AAKhCE,EAAAA,uBALgC;AAMhCU,EAAAA,QAAQ,EAAEb;AANsB,CAAlB,CAAP,CAQRQ,cARQ,CAAf;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\r\nimport {\r\n    follow, getUsersThunkCreator,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowingProgress,\r\n    toggleIsFetching,\r\n    unfollow,\r\n    UsersPropsType,\r\n\r\n} from \"../../redux/users-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {userAPI} from \"../../api/api\";\r\nimport {StateType} from \"../../redux/state\";\r\n\r\nexport type UsersMainPropsType = {\r\n    users: Array<UsersPropsType>,\r\n    follow: (id: number) => void,\r\n    unfollow: (id: number) => void,\r\n    setUsers: (users: Array<UsersPropsType>) => void,\r\n    currentPage: number,\r\n    pageSize: number,\r\n    setTotalUsersCount: (totalCount: number) => void,\r\n    setCurrentPage: (pageNumber: number) => void,\r\n    totalUsersCount: number,\r\n    toggleIsFetching: (boolean: boolean) => void,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void,\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\n\r\nexport class UsersContainer extends  React.Component <UsersMainPropsType> {\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n\r\n      /*  this.props.toggleIsFetching(true);\r\n\r\n        userAPI.getUsers(this.props.currentPage, this.props.pageSize)\r\n            .then(data => {\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(data.items);\r\n                this.props.setTotalUsersCount(data.totalCount);\r\n            });*/\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    };\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount = {this.props.totalUsersCount}\r\n                pageSize = {this.props.pageSize}\r\n                currentPage = {this.props.currentPage}\r\n                onPageChanged = {this.onPageChanged}\r\n                users = {this.props.users}\r\n                follow = {this.props.follow}\r\n                unfollow = {this.props.unfollow}\r\n                toggleFollowingProgress = {this.props.toggleFollowingProgress}\r\n                followingInProgress = {this.props.followingInProgress}\r\n            />\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:StateType) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setUsers,\r\n        setCurrentPage,\r\n        toggleFollowingProgress,\r\n        getUsers: getUsersThunkCreator,\r\n}\r\n    ) (UsersContainer);\r\n\r\n\r\n/*type MapStateToProps = {\r\n    users: Array<UsersPropsType>\r\n    pageSize: number   //?????\r\n    totalUsersCount: number //????\r\n    currentPage: number //??\r\n    isFetching: boolean\r\n    }\r\ntype MapDispatchToProps = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UsersPropsType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (boolean: boolean) => void\r\n}\r\nexport type UsersContainerPropsType =  MapStateToProps & MapDispatchToProps*/\r\n\r\n/*let mapDispatchToProps = (dispatch: (action: ActionsUsersType) => void): MapDispatchToProps => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount) => {\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/"]},"metadata":{},"sourceType":"module"}