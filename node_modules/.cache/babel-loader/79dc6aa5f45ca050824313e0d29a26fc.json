{"ast":null,"code":"import { userAPI } from \"../api/api\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET-USERS';\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 100,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: []\n};\nexport const usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        users: action.users\n      };\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.totalCount\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\nexport const follow = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollow = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalCount => ({\n  type: SET_TOTAL_COUNT,\n  totalCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\n\nconst getUsersThunkCreator = () => {\n  return dispatch => {\n    dispatch(toggleIsFetching(true));\n    userAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\n      dispatch(toggleIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUsersCount(data.totalCount));\n    });\n  };\n};","map":{"version":3,"sources":["C:/incubator/social_network_ts/src/redux/users-reducer.ts"],"names":["userAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","totalCount","filter","follow","unfollow","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","getUsersThunkCreator","dispatch","getUsers","props","then","data","items"],"mappings":"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","sourcesContent":["import {userAPI} from \"../api/api\";\r\n\r\nexport type ActionsUsersType = | FollowActionCreatorType\r\n    | UnfollowActionCreatorType\r\n    | SetUsersActionCreatorType\r\n    | SetCurrentPageCreatorType\r\n    | SetTotalCountActionCreatorType\r\n    | ToggleIsFeatcingActionCreatorType\r\n    | ToggleFollowingProgressActionCreatorType\r\n\r\nexport type UsersPropsType = {\r\n    userPhoto: string\r\n    //photoUrl: string\r\n    id: number\r\n    followed: boolean\r\n    fullName: string\r\n    status: string\r\n    name: string\r\n    location: {city: string, country: string}\r\n    photos: {\r\n        small: string,\r\n        //large: string\r\n    }\r\n}\r\nexport type UsersReducerType = {\r\n    users: Array<UsersPropsType>,\r\n    pageSize: number,  ////????\r\n    totalUsersCount: number,   ////????\r\n    currentPage: number, //???\r\n    isFetching: boolean,\r\n    followingInProgress: [],\r\n}\r\nexport type FollowActionCreatorType = {\r\n    type: 'FOLLOW',\r\n    userId: number\r\n}\r\nexport type UnfollowActionCreatorType = {\r\n    type: 'UNFOLLOW',\r\n    userId: number\r\n}\r\nexport type SetUsersActionCreatorType = {\r\n    type: 'SET-USERS',\r\n    users: Array<UsersPropsType>\r\n}\r\nexport type SetCurrentPageCreatorType = {\r\n    type: 'SET-CURRENT-PAGE'\r\n    currentPage: number\r\n}\r\nexport type SetTotalCountActionCreatorType = {\r\n    type: 'SET_TOTAL_COUNT'\r\n    totalCount: number\r\n}\r\nexport type ToggleIsFeatcingActionCreatorType = {\r\n    type: 'TOGGLE_IS_FETCHING'\r\n    isFetching: boolean\r\n}\r\nexport type ToggleFollowingProgressActionCreatorType = {\r\n    type: 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET-USERS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nlet initialState: UsersReducerType = {\r\n    users: [],\r\n    pageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n}\r\n\r\nexport const usersReducer = (state: UsersReducerType = initialState, action: ActionsUsersType) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state, users:action.users\r\n            }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_COUNT: {\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number):FollowActionCreatorType => ({type: FOLLOW, userId});\r\nexport const unfollow = (userId: number): UnfollowActionCreatorType => ({type: UNFOLLOW, userId});\r\nexport const setUsers = (users: Array<UsersPropsType>): SetUsersActionCreatorType=> ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageCreatorType => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalCount: number): SetTotalCountActionCreatorType => ({type: SET_TOTAL_COUNT, totalCount })\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFeatcingActionCreatorType => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressActionCreatorType => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId})\r\n\r\n\r\nconst getUsersThunkCreator = () => {\r\n\r\n    return (dispatch) => {\r\n\r\n        dispatch(toggleIsFetching(true));\r\n\r\n        userAPI.getUsers(this.props.currentPage, this.props.pageSize)\r\n            .then(data => {\r\n                dispatch(toggleIsFetching(false));\r\n                dispatch(setUsers(data.items));\r\n                dispatch(setTotalUsersCount(data.totalCount));\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}