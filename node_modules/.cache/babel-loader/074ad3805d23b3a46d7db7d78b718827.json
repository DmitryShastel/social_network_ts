{"ast":null,"code":"var _jsxFileName = \"C:\\\\incubator\\\\social_network_ts\\\\src\\\\components\\\\Users\\\\UsersContainer.tsx\";\nimport React from \"react\";\nimport { follow, setCurrentPage, setTotalUsersCount, setUsers, toggleFollowingProgress, toggleIsFetching, unfollow } from \"../../redux/users-reducer\";\nimport { connect } from \"react-redux\";\nimport { Users } from \"./Users\";\nimport { Preloader } from \"../common/Preloader/Preloader\";\nimport { userAPI } from \"../../api/api\";\nexport class UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      userAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    userAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(data.items);\n      this.props.setTotalUsersCount(data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isFetching ? /*#__PURE__*/React.createElement(Preloader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 38\n      }\n    }) : null, /*#__PURE__*/React.createElement(Users, {\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      currentPage: this.props.currentPage,\n      onPageChanged: this.onPageChanged,\n      users: this.props.users,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      toggleFollowingProgress: this.props.toggleFollowingProgress,\n      followingInProgress: this.props.followingInProgress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching,\n    followingInProgress: state.usersPage.followingInProgress\n  };\n};\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching,\n  toggleFollowingProgress\n})(UsersContainer);\n/*type MapStateToProps = {\r\n    users: Array<UsersPropsType>\r\n    pageSize: number   //?????\r\n    totalUsersCount: number //????\r\n    currentPage: number //??\r\n    isFetching: boolean\r\n    }\r\ntype MapDispatchToProps = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UsersPropsType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (boolean: boolean) => void\r\n}\r\nexport type UsersContainerPropsType =  MapStateToProps & MapDispatchToProps*/\n\n/*let mapDispatchToProps = (dispatch: (action: ActionsUsersType) => void): MapDispatchToProps => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount) => {\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/","map":{"version":3,"sources":["C:/incubator/social_network_ts/src/components/Users/UsersContainer.tsx"],"names":["React","follow","setCurrentPage","setTotalUsersCount","setUsers","toggleFollowingProgress","toggleIsFetching","unfollow","connect","Users","Preloader","userAPI","UsersContainer","Component","onPageChanged","pageNumber","props","getUsers","pageSize","then","data","items","componentDidMount","currentPage","totalCount","render","isFetching","totalUsersCount","users","followingInProgress","mapStateToProps","state","usersPage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,MADJ,EAEIC,cAFJ,EAGIC,kBAHJ,EAIIC,QAJJ,EAIcC,uBAJd,EAKIC,gBALJ,EAMIC,QANJ,QAQO,2BARP;AASA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,SAAQC,KAAR,QAAoB,SAApB;AACA,SAAQC,SAAR,QAAwB,+BAAxB;AACA,SAAQC,OAAR,QAAsB,eAAtB;AAoBA,OAAO,MAAMC,cAAN,SAA8BZ,KAAK,CAACa,SAApC,CAAmE;AAAA;AAAA;;AAAA,SAatEC,aAbsE,GAarDC,UAAD,IAAwB;AACpC,WAAKC,KAAL,CAAWd,cAAX,CAA0Ba,UAA1B;AACA,WAAKC,KAAL,CAAWV,gBAAX,CAA4B,IAA5B;AAEAK,MAAAA,OAAO,CAACM,QAAR,CAAiBF,UAAjB,EAA6B,KAAKC,KAAL,CAAWE,QAAxC,EACKC,IADL,CACUC,IAAI,IAAI;AACV,aAAKJ,KAAL,CAAWV,gBAAX,CAA4B,KAA5B;AACA,aAAKU,KAAL,CAAWZ,QAAX,CAAoBgB,IAAI,CAACC,KAAzB;AACH,OAJL;AAMH,KAvBqE;AAAA;;AAEtEC,EAAAA,iBAAiB,GAAG;AAChB,SAAKN,KAAL,CAAWV,gBAAX,CAA4B,IAA5B;AAEAK,IAAAA,OAAO,CAACM,QAAR,CAAiB,KAAKD,KAAL,CAAWO,WAA5B,EAAyC,KAAKP,KAAL,CAAWE,QAApD,EACKC,IADL,CACUC,IAAI,IAAI;AACV,WAAKJ,KAAL,CAAWV,gBAAX,CAA4B,KAA5B;AACA,WAAKU,KAAL,CAAWZ,QAAX,CAAoBgB,IAAI,CAACC,KAAzB;AACA,WAAKL,KAAL,CAAWb,kBAAX,CAA8BiB,IAAI,CAACI,UAAnC;AACH,KALL;AAMH;;AAcDC,EAAAA,MAAM,GAAG;AACL,wBAAO,0CACF,KAAKT,KAAL,CAAWU,UAAX,gBAAwB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxB,GAAuC,IADrC,eAEH,oBAAC,KAAD;AACI,MAAA,eAAe,EAAI,KAAKV,KAAL,CAAWW,eADlC;AAEI,MAAA,QAAQ,EAAI,KAAKX,KAAL,CAAWE,QAF3B;AAGI,MAAA,WAAW,EAAI,KAAKF,KAAL,CAAWO,WAH9B;AAII,MAAA,aAAa,EAAI,KAAKT,aAJ1B;AAKI,MAAA,KAAK,EAAI,KAAKE,KAAL,CAAWY,KALxB;AAMI,MAAA,MAAM,EAAI,KAAKZ,KAAL,CAAWf,MANzB;AAOI,MAAA,QAAQ,EAAI,KAAKe,KAAL,CAAWT,QAP3B;AAQI,MAAA,uBAAuB,EAAI,KAAKS,KAAL,CAAWX,uBAR1C;AASI,MAAA,mBAAmB,EAAI,KAAKW,KAAL,CAAWa,mBATtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFG,CAAP;AAeH;;AAzCqE;;AA4C1E,IAAIC,eAAe,GAAIC,KAAD,IAAqB;AACvC,SAAO;AACHH,IAAAA,KAAK,EAAEG,KAAK,CAACC,SAAN,CAAgBJ,KADpB;AAEHV,IAAAA,QAAQ,EAAEa,KAAK,CAACC,SAAN,CAAgBd,QAFvB;AAGHS,IAAAA,eAAe,EAAEI,KAAK,CAACC,SAAN,CAAgBL,eAH9B;AAIHJ,IAAAA,WAAW,EAAEQ,KAAK,CAACC,SAAN,CAAgBT,WAJ1B;AAKHG,IAAAA,UAAU,EAAEK,KAAK,CAACC,SAAN,CAAgBN,UALzB;AAMHG,IAAAA,mBAAmB,EAAEE,KAAK,CAACC,SAAN,CAAgBH;AANlC,GAAP;AAQH,CATD;;AAcA,eAAerB,OAAO,CAACsB,eAAD,EAAkB;AAChC7B,EAAAA,MADgC;AAEhCM,EAAAA,QAFgC;AAGhCH,EAAAA,QAHgC;AAIhCF,EAAAA,cAJgC;AAKhCC,EAAAA,kBALgC;AAMhCG,EAAAA,gBANgC;AAOhCD,EAAAA;AAPgC,CAAlB,CAAP,CASRO,cATQ,CAAf;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowingProgress,\r\n    toggleIsFetching,\r\n    unfollow,\r\n    UsersPropsType\r\n} from \"../../redux/users-reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {userAPI} from \"../../api/api\";\r\nimport {StateType} from \"../../redux/state\";\r\n\r\nexport type UsersMainPropsType = {\r\n    users: Array<UsersPropsType>,\r\n    follow: (id: number) => void,\r\n    unfollow: (id: number) => void,\r\n    setUsers: (users: Array<UsersPropsType>) => void,\r\n    currentPage: number,\r\n    pageSize: number,\r\n    setTotalUsersCount: (totalCount: number) => void,\r\n    setCurrentPage: (pageNumber: number) => void,\r\n    totalUsersCount: number,\r\n    toggleIsFetching: (boolean: boolean) => void,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void,\r\n}\r\n\r\n\r\nexport class UsersContainer extends  React.Component <UsersMainPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n\r\n        userAPI.getUsers(this.props.currentPage, this.props.pageSize)\r\n            .then(data => {\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(data.items);\r\n                this.props.setTotalUsersCount(data.totalCount);\r\n            });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true);\r\n\r\n        userAPI.getUsers(pageNumber, this.props.pageSize)\r\n            .then(data => {\r\n                this.props.toggleIsFetching(false);\r\n                this.props.setUsers(data.items);\r\n            })\r\n\r\n    };\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount = {this.props.totalUsersCount}\r\n                pageSize = {this.props.pageSize}\r\n                currentPage = {this.props.currentPage}\r\n                onPageChanged = {this.onPageChanged}\r\n                users = {this.props.users}\r\n                follow = {this.props.follow}\r\n                unfollow = {this.props.unfollow}\r\n                toggleFollowingProgress = {this.props.toggleFollowingProgress}\r\n                followingInProgress = {this.props.followingInProgress}\r\n            />\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:StateType) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setUsers,\r\n        setCurrentPage,\r\n        setTotalUsersCount,\r\n        toggleIsFetching,\r\n        toggleFollowingProgress,\r\n}\r\n    ) (UsersContainer);\r\n\r\n\r\n/*type MapStateToProps = {\r\n    users: Array<UsersPropsType>\r\n    pageSize: number   //?????\r\n    totalUsersCount: number //????\r\n    currentPage: number //??\r\n    isFetching: boolean\r\n    }\r\ntype MapDispatchToProps = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UsersPropsType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (boolean: boolean) => void\r\n}\r\nexport type UsersContainerPropsType =  MapStateToProps & MapDispatchToProps*/\r\n\r\n/*let mapDispatchToProps = (dispatch: (action: ActionsUsersType) => void): MapDispatchToProps => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount) => {\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        }\r\n    }\r\n}*/"]},"metadata":{},"sourceType":"module"}