{"ast":null,"code":"const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET-USERS';\nexport const followAC = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowAC = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsersAC = users => ({\n  type: SET_USERS,\n  users\n});\nlet initialState = {\n  users: [{\n    id: 1,\n    followed: true,\n    fullName: 'Dima',\n    status: 'I am boss',\n    location: {\n      city: 'Minsk',\n      country: 'Belarus'\n    },\n    photoUrl: 'https://cdn1.iconfinder.com/data/icons/user-avatars-2/300/04-512.png'\n  }, {\n    id: 2,\n    followed: true,\n    fullName: 'Denis',\n    status: 'I am boss too',\n    location: {\n      city: 'Moscow',\n      country: 'Russia'\n    },\n    photoUrl: 'https://cdn1.iconfinder.com/data/icons/user-avatars-2/300/04-512.png'\n  }, {\n    id: 3,\n    followed: true,\n    fullName: 'Sasha',\n    status: 'I am boss too',\n    location: {\n      city: 'Kiev',\n      country: 'Ukraine'\n    },\n    photoUrl: 'https://cdn1.iconfinder.com/data/icons/user-avatars-2/300/04-512.png'\n  }]\n};\nexport const usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        users: [...state.users, ...action.users]\n      };\n  }\n};","map":{"version":3,"sources":["C:/incubator/social_network_ts/src/redux/users-reducer.ts"],"names":["FOLLOW","UNFOLLOW","SET_USERS","followAC","userId","type","unfollowAC","setUsersAC","users","initialState","id","followed","fullName","status","location","city","country","photoUrl","usersReducer","state","action","map","u"],"mappings":"AA0BA,MAAMA,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,MAAD,KAA6C;AAACC,EAAAA,IAAI,EAAEL,MAAP;AAAeI,EAAAA;AAAf,CAA7C,CAAjB;AACP,OAAO,MAAME,UAAU,GAAIF,MAAD,KAAgD;AAACC,EAAAA,IAAI,EAAEJ,QAAP;AAAiBG,EAAAA;AAAjB,CAAhD,CAAnB;AACP,OAAO,MAAMG,UAAU,GAAIC,KAAD,KAA6D;AAACH,EAAAA,IAAI,EAAEH,SAAP;AAAkBM,EAAAA;AAAlB,CAA7D,CAAnB;AAEP,IAAIC,YAAY,GAAE;AACdD,EAAAA,KAAK,EAAE,CACH;AACIE,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,QAAQ,EAAE,IAFd;AAGIC,IAAAA,QAAQ,EAAE,MAHd;AAIIC,IAAAA,MAAM,EAAE,WAJZ;AAKIC,IAAAA,QAAQ,EAAE;AAACC,MAAAA,IAAI,EAAE,OAAP;AAAgBC,MAAAA,OAAO,EAAE;AAAzB,KALd;AAMIC,IAAAA,QAAQ,EAAE;AANd,GADG,EASH;AACIP,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,QAAQ,EAAE,IAFd;AAGIC,IAAAA,QAAQ,EAAE,OAHd;AAIIC,IAAAA,MAAM,EAAE,eAJZ;AAKIC,IAAAA,QAAQ,EAAE;AAACC,MAAAA,IAAI,EAAE,QAAP;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KALd;AAMIC,IAAAA,QAAQ,EAAE;AANd,GATG,EAiBH;AACIP,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,QAAQ,EAAE,IAFd;AAGIC,IAAAA,QAAQ,EAAE,OAHd;AAIIC,IAAAA,MAAM,EAAE,eAJZ;AAKIC,IAAAA,QAAQ,EAAE;AAACC,MAAAA,IAAI,EAAE,MAAP;AAAeC,MAAAA,OAAO,EAAE;AAAxB,KALd;AAMIC,IAAAA,QAAQ,EAAE;AANd,GAjBG;AADO,CAAlB;AA6BA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAuB,GAAGV,YAA3B,EAAyCW,MAAzC,KAAgE;AAExF,UAAQA,MAAM,CAACf,IAAf;AACI,SAAKL,MAAL;AACI,aAAO,EACH,GAAGmB,KADA;AAEHX,QAAAA,KAAK,EAAEW,KAAK,CAACX,KAAN,CAAYa,GAAZ,CAAgBC,CAAC,IAAI;AACxB,cAAIA,CAAC,CAACZ,EAAF,KAASU,MAAM,CAAChB,MAApB,EAA4B;AACxB,mBAAO,EAAC,GAAGkB,CAAJ;AAAOX,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AACH;;AACD,iBAAOW,CAAP;AACH,SALM;AAFJ,OAAP;;AASJ,SAAKrB,QAAL;AACI,aAAO,EACH,GAAGkB,KADA;AAEHX,QAAAA,KAAK,EAAEW,KAAK,CAACX,KAAN,CAAYa,GAAZ,CAAgBC,CAAC,IAAI;AACxB,cAAIA,CAAC,CAACZ,EAAF,KAASU,MAAM,CAAChB,MAApB,EAA4B;AACxB,mBAAO,EAAC,GAAGkB,CAAJ;AAAOX,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AACH;;AACD,iBAAOW,CAAP;AACH,SALM;AAFJ,OAAP;;AASJ,SAAKpB,SAAL;AACI,aAAO,EACH,GAAGiB,KADA;AACOX,QAAAA,KAAK,EAAE,CAAC,GAAGW,KAAK,CAACX,KAAV,EAAiB,GAAGY,MAAM,CAACZ,KAA3B;AADd,OAAP;AAtBR;AA2BH,CA7BM","sourcesContent":["import {ActionType} from \"./state\";\r\n\r\nexport type UsersPropsType = {\r\n    id: number\r\n    followed: boolean\r\n    fullName: string\r\n    status: string\r\n    location: {city: string, country: string}\r\n}\r\nexport type UsersReducerType = {\r\n    users: Array<UsersPropsType>\r\n}\r\nexport type FollowActionCreatorType = {\r\n    type: 'FOLLOW',\r\n    userId: number\r\n}\r\nexport type UnfollowActionCreatorType = {\r\n    type: 'UNFOLLOW',\r\n    userId: number\r\n}\r\nexport type SetUsersActionCreatorType = {\r\n    type: 'SET-USERS',\r\n    users: Array<UsersPropsType>\r\n}\r\n\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET-USERS'\r\n\r\nexport const followAC = (userId: number):FollowActionCreatorType => ({type: FOLLOW, userId});\r\nexport const unfollowAC = (userId: number): UnfollowActionCreatorType => ({type: UNFOLLOW, userId});\r\nexport const setUsersAC = (users: Array<UsersPropsType>): SetUsersActionCreatorType=> ({type: SET_USERS, users})\r\n\r\nlet initialState= {\r\n    users: [\r\n        {\r\n            id: 1,\r\n            followed: true,\r\n            fullName: 'Dima',\r\n            status: 'I am boss',\r\n            location: {city: 'Minsk', country: 'Belarus'},\r\n            photoUrl: 'https://cdn1.iconfinder.com/data/icons/user-avatars-2/300/04-512.png'\r\n        },\r\n        {\r\n            id: 2,\r\n            followed: true,\r\n            fullName: 'Denis',\r\n            status: 'I am boss too',\r\n            location: {city: 'Moscow', country: 'Russia'},\r\n            photoUrl: 'https://cdn1.iconfinder.com/data/icons/user-avatars-2/300/04-512.png'\r\n        },\r\n        {\r\n            id: 3,\r\n            followed: true,\r\n            fullName: 'Sasha',\r\n            status: 'I am boss too',\r\n            location: {city: 'Kiev', country: 'Ukraine'},\r\n            photoUrl: 'https://cdn1.iconfinder.com/data/icons/user-avatars-2/300/04-512.png'\r\n        }\r\n    ]\r\n}\r\n\r\nexport const usersReducer = (state: UsersReducerType = initialState, action: ActionType) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state, users: [...state.users, ...action.users]\r\n            }\r\n\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}